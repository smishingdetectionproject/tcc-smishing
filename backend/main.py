"""
Detector de Smishing - Backend API
Projeto de TCC da UNIVESP

Este arquivo cont√©m a API FastAPI que realiza a an√°lise de mensagens SMS
para detectar potenciais tentativas de smishing (phishing por SMS).

Autor: Desenvolvido para o TCC da UNIVESP
Data: 2025
"""

import os
import csv
import json
import requests # Adicionado para comunica√ß√£o com a API do GitHub
from datetime import datetime
from pathlib import Path
from typing import Optional

import numpy as np
import pandas as pd
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import joblib
from sklearn.feature_extraction.text import TfidfVectorizer

# ============================================================================
# CONFIGURA√á√ÉO INICIAL
# ============================================================================

# Criar aplica√ß√£o FastAPI
app = FastAPI(
    title="Detector de Smishing",
    description="API para detec√ß√£o de mensagens SMS fraudulentas (smishing)",
    version="1.0.0"
)

# Configurar CORS para permitir requisi√ß√µes do frontend
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Em produ√ß√£o, especificar dom√≠nios permitidos
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ============================================================================
# CARREGAMENTO DOS MODELOS
# ============================================================================

# Diret√≥rio do backend
BACKEND_DIR = Path(__file__).parent
MODEL_DIR = BACKEND_DIR / "models"
DATA_DIR = BACKEND_DIR / "data"

# Criar diret√≥rios se n√£o existirem
MODEL_DIR.mkdir(exist_ok=True)
DATA_DIR.mkdir(exist_ok=True)

# Configura√ß√µes do GitHub Gist para persist√™ncia do feedback
GIST_ID = "49f7cfb15be23bb0add2a3ddc4ef343a" # ID fornecido pelo usu√°rio
GIST_FILENAME = "feedback.csv"
GIST_API_URL = f"https://api.github.com/gists/{GIST_ID}"

# Carregar o vetorizador TF-IDF
try:
    # Tentar carregar de um arquivo pickle
    import pickle
    with open(BACKEND_DIR / "tfidf_vectorizer.pkl", "rb") as f:
        tfidf_vectorizer = pickle.load(f)
    print("‚úì Vetorizador TF-IDF carregado com sucesso")
except Exception as e:
    print(f"‚úó Erro ao carregar vetorizador TF-IDF: {e}")
    tfidf_vectorizer = None

# Carregar o modelo Random Forest
try:
    import pickle
    with open(BACKEND_DIR / "random_forest.pkl", "rb") as f:
        model_rf = pickle.load(f)
    print("‚úì Modelo Random Forest carregado com sucesso")
except Exception as e:
    print(f"‚úó Erro ao carregar modelo Random Forest: {e}")
    model_rf = None

# Carregar o modelo Complement Naive Bayes (como modelo alternativo)
try:
    import pickle
    with open(BACKEND_DIR / "complement_naive_bayes.pkl", "rb") as f:
        model_nb = pickle.load(f)
    print("‚úì Modelo Complement Naive Bayes carregado com sucesso")
except Exception as e:
    print(f"‚úó Erro ao carregar modelo Complement Naive Bayes: {e}")
    model_nb = None

# Carregar dados de treinamento para an√°lise
try:
    data_df = pd.read_csv(BACKEND_DIR / "data_processed.csv")
    print(f"‚úì Dados de treinamento carregados ({len(data_df)} registros)")
except Exception as e:
    print(f"‚úó Erro ao carregar dados de treinamento: {e}")
    data_df = None

# ============================================================================
# MODELOS DE DADOS (Pydantic)
# ============================================================================

class AnaliseRequest(BaseModel):
    """Modelo para requisi√ß√£o de an√°lise de SMS"""
    mensagem: str
    modelo: Optional[str] = "random_forest"  # random_forest ou naive_bayes


class CaracteristicaDetectada(BaseModel):
    """Modelo para uma caracter√≠stica detectada na mensagem"""
    nome: str
    descricao: str
    icone: str
    confianca: float


class AnaliseResponse(BaseModel):
    """Modelo para resposta de an√°lise"""
    veredito: str  # "Leg√≠tima" ou "Smishing"
    confianca: float
    caracteristicas: list[CaracteristicaDetectada]
    explicacao: str
    modelo_usado: str


class FeedbackRequest(BaseModel):
    """Modelo para requisi√ß√£o de feedback"""
    mensagem: str
    veredito_original: str
    feedback_util: bool
    comentario_usuario: Optional[str] = None # Alterado para 'comentario_usuario'


class FeedbackResponse(BaseModel):
    """Modelo para resposta de feedback"""
    sucesso: bool
    mensagem: str


# ============================================================================
# FUN√á√ïES AUXILIARES
# ============================================================================

def extrair_caracteristicas_smishing(mensagem: str) -> list[CaracteristicaDetectada]:
    """
    Extrai caracter√≠sticas que indicam poss√≠vel smishing.
    
    Esta fun√ß√£o analisa a mensagem e identifica padr√µes comuns em tentativas
    de phishing por SMS.
    
    Args:
        mensagem: Texto da mensagem SMS
        
    Returns:
        Lista de caracter√≠sticas detectadas
    """
    caracteristicas = []
    mensagem_lower = mensagem.lower()
    
    # Padr√£o 1: Senso de urg√™ncia
    palavras_urgencia = ["urgente", "r√°pido", "agora", "imediato", "a√ß√£o r√°pida", 
                         "n√£o demore", "apresse", "pressa", "agir j√°"]
    if any(palavra in mensagem_lower for palavra in palavras_urgencia):
        caracteristicas.append(CaracteristicaDetectada(
            nome="Senso de Urg√™ncia",
            descricao="A mensagem pressiona voc√™ a agir r√°pido sem pensar.",
            icone="üö®",
            confianca=0.85
        ))
    
    # Padr√£o 2: Pedido de dados pessoais (Expandido)
    palavras_dados = ["senha", "pin", "c√≥digo", "dados banc√°rios", "confirmar dados", "verificar conta"]
    
    # Regex para documentos e cart√µes
    # CPF (XXX.XXX.XXX-XX ou XXXXXXXXXXX)
    # RG (XX.XXX.XXX-X ou XXXXXXXXXX)
    # Cart√£o de Cr√©dito (XXXX XXXX XXXX XXXX)
    # T√≠tulo de Eleitor (12 d√≠gitos)
    import re
    regex_dados = r'\bcpf\b|\brg\b|\bt√≠tulo de eleitor\b|\bcart√£o de cr√©dito\b|\bcart√£o de d√©bito\b|\bcart√£o\b|\bcvv\b|\bdata de validade\b|\bvalidade do cart√£o\b'
    
    if any(palavra in mensagem_lower for palavra in palavras_dados) or re.search(regex_dados, mensagem_lower):
        caracteristicas.append(CaracteristicaDetectada(
            nome="Pedido de Dados Pessoais/Documentos",
            descricao="Solicita informa√ß√µes sens√≠veis (CPF, RG, Cart√£o, Senha) que voc√™ nunca deve compartilhar.",
            icone="üîê",
            confianca=0.99
        ))
    
    # Padr√£o 3: Pedido de dinheiro ou transfer√™ncia
    palavras_dinheiro = ["transferir", "pagar", "enviar dinheiro", "dep√≥sito", 
                         "valor", "reais", "mt", "mzn", "d√©bito"]
    if any(palavra in mensagem_lower for palavra in palavras_dinheiro):
        caracteristicas.append(CaracteristicaDetectada(
            nome="Pedido de Dinheiro",
            descricao="Solicita transfer√™ncias ou pagamentos.",
            icone="üí∞",
            confianca=0.80
        ))
    
    # Padr√£o 4: Links ou n√∫meros suspeitos (Heur√≠stica Aprimorada)
    # Regex para encontrar URLs
    url_pattern = re.compile(r'https?://[^\s]+|www\.[^\s]+|\bbit\.ly\b|\btinyurl\.com\b', re.IGNORECASE)
    links_encontrados = url_pattern.findall(mensagem)

    if links_encontrados:
        # Contar links HTTPS (mais seguros) e HTTP (menos seguros)
        links_http = sum(1 for link in links_encontrados if link.startswith("http://"))
        links_https = sum(1 for link in links_encontrados if link.startswith("https://"))
        
        # Focar em links HTTP ou encurtadores (bit.ly, tinyurl)
        tem_link_suspeito = links_http > 0 or any(re.search(r'\bbit\.ly\b|\btinyurl\.com\b', link, re.IGNORECASE) for link in links_encontrados)
        
        if tem_link_suspeito:
            caracteristicas.append(CaracteristicaDetectada(
                nome="Presen√ßa de Links Suspeitos",
                descricao="Cont√©m links que usam HTTP (n√£o seguro) ou encurtadores (comuns em golpes).",
                icone="üîó",
                confianca=0.99
            ))
        elif links_https > 0:
            # Se for apenas HTTPS, ainda √© um alerta, mas com confian√ßa menor
            caracteristicas.append(CaracteristicaDetectada(
                nome="Presen√ßa de Links",
                descricao="Cont√©m links (HTTPS) que podem ser leg√≠timos, mas exigem cautela.",
                icone="üîó",
                confianca=0.75
            ))
    
    # Padr√£o 5: Erros gramaticais e ortogr√°ficos
    erros = mensagem.count(" ") - len(mensagem.split())  # Heur√≠stica simples
    if len(mensagem) > 50 and (mensagem.count("  ") > 0 or 
                                mensagem.count(",,") > 0 or
                                mensagem.count("..") > 0):
        caracteristicas.append(CaracteristicaDetectada(
            nome="Erros Gramaticais",
            descricao="Mensagem cont√©m erros de digita√ß√£o ou formata√ß√£o.",
            icone="‚úèÔ∏è",
            confianca=0.60
        ))
    
    # Padr√£o 6: N√∫meros de telefone ou contas
    if re.search(r'\d{8,}', mensagem):  # Sequ√™ncia de 8+ d√≠gitos
        caracteristicas.append(CaracteristicaDetectada(
            nome="N√∫meros Suspeitos",
            descricao="Cont√©m sequ√™ncias de n√∫meros que podem ser contas ou telefones.",
            icone="üì±",
            confianca=0.70
        ))
    
    return caracteristicas


def analisar_com_modelo(mensagem: str, modelo_nome: str = "random_forest") -> tuple[str, float]:
    """
    Realiza a an√°lise da mensagem usando o modelo de ML.
    
    Args:
        mensagem: Texto da mensagem SMS
        modelo_nome: Nome do modelo a usar ("random_forest" ou "naive_bayes")
        
    Returns:
        Tupla (veredito, confian√ßa)
    """
    if tfidf_vectorizer is None:
        raise HTTPException(
            status_code=500,
            detail="Vetorizador TF-IDF n√£o carregado"
        )
    
    # Vetorizar a mensagem
    X = tfidf_vectorizer.transform([mensagem])
    
    # Escolher modelo
    if modelo_nome == "naive_bayes" and model_nb is not None:
        modelo = model_nb
    elif model_rf is not None:
        modelo = model_rf
    else:
        raise HTTPException(
            status_code=500,
            detail="Nenhum modelo dispon√≠vel para an√°lise"
        )
    
    # Fazer predi√ß√£o
    predicao = modelo.predict(X)[0]
    probabilidades = modelo.predict_proba(X)[0]
    
    # Mapear predi√ß√£o para veredito
    # CORRE√á√ÉO: 1 √© Smishing, 0 √© Leg√≠tima (conforme notebook de treinamento)
    veredito = "Smishing" if predicao == 1 else "Leg√≠tima"
    confianca = max(probabilidades)
    
    return veredito, confianca


# ============================================================================
# ENDPOINTS DA API
# ============================================================================

@app.get("/")
async def root():
    """Endpoint raiz para verificar se a API est√° funcionando"""
    return {
        "nome": "Detector de Smishing",
        "versao": "1.0.0",
        "status": "ativo",
        "modelos_carregados": {
            "random_forest": model_rf is not None,
            "naive_bayes": model_nb is not None,
            "tfidf_vectorizer": tfidf_vectorizer is not None
        }
    }


@app.get("/health")
async def health_check():
    """Endpoint para verifica√ß√£o de sa√∫de da API"""
    return {
        "status": "ok",
        "timestamp": datetime.now().isoformat()
    }


@app.post("/analisar", response_model=AnaliseResponse)
async def analisar_mensagem(request: AnaliseRequest):
    """
    Analisa uma mensagem SMS para detectar smishing.
    
    Args:
        request: Objeto contendo a mensagem e modelo a usar
        
    Returns:
        Resposta com veredito, confian√ßa e caracter√≠sticas detectadas
    """
    # Validar entrada
    if not request.mensagem or len(request.mensagem.strip()) == 0:
        raise HTTPException(
            status_code=400,
            detail="Mensagem n√£o pode estar vazia"
        )
    
    # 1. An√°lise do Modelo de ML
    veredito, confianca = analisar_com_modelo(request.mensagem, request.modelo)
    modelo_usado = request.modelo
    
    # 2. Extra√ß√£o de Caracter√≠sticas Heur√≠sticas
    caracteristicas = extrair_caracteristicas_smishing(request.mensagem)
    
    # 3. Regra de SOBREPOSI√á√ÉO (OVERRIDE) para casos cr√≠ticos:
    # Se o modelo classificou como Leg√≠tima, mas h√° uma combina√ß√£o cr√≠tica de caracter√≠sticas heur√≠sticas,
    # for√ßar a classifica√ß√£o para Smishing.
    
    tem_urgencia = any(c.nome == "Senso de Urg√™ncia" for c in caracteristicas)
    tem_dados_pessoais = any(c.nome == "Pedido de Dados Pessoais/Documentos" for c in caracteristicas)
    tem_links = any(c.nome == "Presen√ßa de Links Suspeitos" for c in caracteristicas)
    
    # Condi√ß√£o de override: (Urg√™ncia + Dados Pessoais) OU (Presen√ßa de Links Suspeitos)
    if veredito == "Leg√≠tima" and ( (tem_urgencia and tem_dados_pessoais) or tem_links ):
        veredito = "Smishing"
        # Aumentar a confian√ßa para refletir a certeza da regra de seguran√ßa
        confianca = max(confianca, 0.99) 
        explicacao = (
            "Esta mensagem foi classificada como uma **poss√≠vel tentativa de smishing** por uma regra de seguran√ßa cr√≠tica. "
            "O modelo de ML a considerou leg√≠tima, mas a combina√ß√£o de **Senso de Urg√™ncia** e "
            "**Pedido de Dados Pessoais/Documentos** OU a **Presen√ßa de Links Suspeitos** s√£o indicadores fort√≠ssimos de golpe. "
            "Recomendamos extrema cautela."
        )
    else:
        # Gerar explica√ß√£o baseada no veredito do modelo (ou do override)
        if veredito == "Smishing":
            explicacao = (
                "Esta mensagem foi classificada como uma **poss√≠vel tentativa de smishing** "
                "(phishing por SMS). Ela apresenta caracter√≠sticas comuns "
                "em mensagens fraudulentas. N√£o clique em links, n√£o compartilhe "
                "dados pessoais e n√£o realize transfer√™ncias solicitadas."
            )
        else:
            explicacao = (
                "Esta mensagem foi classificada como leg√≠tima. No entanto, sempre "
                "mantenha a cautela com mensagens n√£o esperadas. Se tiver d√∫vidas, "
                "entre em contato diretamente com a institui√ß√£o."
            )
        
        # Se for leg√≠tima, mas tiver caracter√≠sticas suspeitas, adicionar um alerta
        if veredito == "Leg√≠tima" and len(caracteristicas) > 0:
            explicacao += " **ATEN√á√ÉO:** Embora o modelo a considere leg√≠tima, foram detectadas caracter√≠sticas comuns em golpes. Prossiga com cautela."
        
        # Se for Smishing, mas a confian√ßa for baixa, adicionar um alerta
        if veredito == "Smishing" and confianca < 0.7:
            explicacao += " **NOTA:** A confian√ßa do modelo nesta classifica√ß√£o √© baixa. Considere a an√°lise das caracter√≠sticas detectadas."
            
    return AnaliseResponse(
        veredito=veredito,
        confianca=confianca,
        caracteristicas=caracteristicas,
        explicacao=explicacao,
        modelo_usado=modelo_usado
    )


def get_gist_content() -> str:
    """Busca o conte√∫do atual do Gist."""
    headers = {
        "Authorization": f"token {os.environ.get('GITHUB_PAT')}",
        "Accept": "application/vnd.github.v3+json"
    }
    
    try:
        response = requests.get(GIST_API_URL, headers=headers)
        response.raise_for_status()
        
        gist_data = response.json()
        
        if GIST_FILENAME in gist_data["files"]:
            return gist_data["files"][GIST_FILENAME]["content"]
        else:
            # Se o arquivo n√£o existir no Gist, retorna apenas o cabe√ßalho
            return "timestamp,mensagem,veredito_original,feedback_util,comentario_usuario\n"
            
    except requests.exceptions.RequestException as e:
        print(f"Erro ao buscar Gist: {e}")
        # Em caso de erro, retorna apenas o cabe√ßalho para evitar perda de dados
        return "timestamp,mensagem,veredito_original,feedback_util,comentario_usuario\n"


def update_gist_content(new_content: str) -> bool:
    """Atualiza o conte√∫do do Gist."""
    headers = {
        "Authorization": f"token {os.environ.get('GITHUB_PAT')}",
        "Accept": "application/vnd.github.v3+json"
    }
    
    data = {
        "files": {
            GIST_FILENAME: {
                "content": new_content
            }
        }
    }
    
    try:
        response = requests.patch(GIST_API_URL, headers=headers, json=data)
        response.raise_for_status()
        return True
    except requests.exceptions.RequestException as e:
        print(f"Erro ao atualizar Gist: {e}")
        return False


@app.post("/feedback", response_model=FeedbackResponse)
async def receber_feedback(request: FeedbackRequest):
    """
    Recebe feedback do usu√°rio e salva no GitHub Gist.
    
    Args:
        request: Objeto contendo o feedback do usu√°rio
        
    Returns:
        Resposta de sucesso
    """
    # 1. Obter o conte√∫do atual do Gist
    current_content = get_gist_content()
    
    # 2. Formatar o novo feedback
    novo_feedback = {
        'timestamp': datetime.now().isoformat(),
        'mensagem': request.mensagem.replace('\n', ' ').replace('\r', ''), # Remover quebras de linha para CSV
        'veredito_original': request.veredito_original,
        'feedback_util': request.feedback_util,
        'comentario_usuario': request.comentario_usuario.replace('\n', ' ').replace('\r', '') if request.comentario_usuario else ''
    }
    
    # Converter o novo feedback para a linha CSV
    fieldnames = ['timestamp', 'mensagem', 'veredito_original', 'feedback_util', 'comentario_usuario']
    
    # Usar StringIO para simular a escrita CSV e obter a linha
    import io
    output = io.StringIO()
    writer = csv.DictWriter(output, fieldnames=fieldnames, extrasaction='ignore')
    writer.writerow(novo_feedback)
    nova_linha_csv = output.getvalue().strip()
    
    # 3. Anexar a nova linha ao conte√∫do
    # Se o conte√∫do atual for apenas o cabe√ßalho, a nova linha j√° tem o cabe√ßalho.
    # Se n√£o for, removemos o cabe√ßalho da nova linha (que o DictWriter adiciona)
    if current_content.endswith('\n'):
        novo_conteudo = current_content + nova_linha_csv
    else:
        # Se o arquivo n√£o terminar com \n, adicionamos um e a nova linha
        novo_conteudo = current_content + '\n' + nova_linha_csv
    
    # 4. Atualizar o Gist
    if update_gist_content(novo_conteudo):
        return FeedbackResponse(
            sucesso=True,
            mensagem="Feedback recebido com sucesso e salvo no GitHub Gist. Obrigado por ajudar a melhorar o modelo!"
        )
    else:
        raise HTTPException(
            status_code=500,
            detail="Erro ao salvar feedback no GitHub Gist. Verifique o GIST_ID e o GITHUB_PAT."
        )