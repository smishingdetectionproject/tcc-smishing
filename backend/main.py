"""
Detector de Smishing - Backend API
Projeto de TCC da UNIVESP

Este arquivo cont√©m a API FastAPI que realiza a an√°lise de mensagens SMS
para detectar potenciais tentativas de smishing (phishing por SMS).

Autor: Desenvolvido para o TCC da UNIVESP
Data: 2025
"""

import os
import csv
import json
from datetime import datetime
from pathlib import Path
from typing import Optional

import numpy as np
import pandas as pd
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import joblib
from sklearn.feature_extraction.text import TfidfVectorizer

# ============================================================================
# CONFIGURA√á√ÉO INICIAL
# ============================================================================

# Criar aplica√ß√£o FastAPI
app = FastAPI(
    title="Detector de Smishing",
    description="API para detec√ß√£o de mensagens SMS fraudulentas (smishing)",
    version="1.0.0"
)

# Configurar CORS para permitir requisi√ß√µes do frontend
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Em produ√ß√£o, especificar dom√≠nios permitidos
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ============================================================================
# CARREGAMENTO DOS MODELOS
# ============================================================================

# Diret√≥rio do backend
BACKEND_DIR = Path(__file__).parent
MODEL_DIR = BACKEND_DIR / "models"
DATA_DIR = BACKEND_DIR / "data"

# Criar diret√≥rios se n√£o existirem
MODEL_DIR.mkdir(exist_ok=True)
DATA_DIR.mkdir(exist_ok=True)

# Carregar o vetorizador TF-IDF
try:
    # Tentar carregar de um arquivo pickle
    import pickle
    with open(BACKEND_DIR / "tfidf_vectorizer.pkl", "rb") as f:
        tfidf_vectorizer = pickle.load(f)
    print("‚úì Vetorizador TF-IDF carregado com sucesso")
except Exception as e:
    print(f"‚úó Erro ao carregar vetorizador TF-IDF: {e}")
    tfidf_vectorizer = None

# Carregar o modelo Random Forest
try:
    import pickle
    with open(BACKEND_DIR / "random_forest.pkl", "rb") as f:
        model_rf = pickle.load(f)
    print("‚úì Modelo Random Forest carregado com sucesso")
except Exception as e:
    print(f"‚úó Erro ao carregar modelo Random Forest: {e}")
    model_rf = None

# Carregar o modelo Complement Naive Bayes (como modelo alternativo)
try:
    import pickle
    with open(BACKEND_DIR / "complement_naive_bayes.pkl", "rb") as f:
        model_nb = pickle.load(f)
    print("‚úì Modelo Complement Naive Bayes carregado com sucesso")
except Exception as e:
    print(f"‚úó Erro ao carregar modelo Complement Naive Bayes: {e}")
    model_nb = None

# Carregar dados de treinamento para an√°lise
try:
    data_df = pd.read_csv(BACKEND_DIR / "data_processed.csv")
    print(f"‚úì Dados de treinamento carregados ({len(data_df)} registros)")
except Exception as e:
    print(f"‚úó Erro ao carregar dados de treinamento: {e}")
    data_df = None

# ============================================================================
# MODELOS DE DADOS (Pydantic)
# ============================================================================

class AnaliseRequest(BaseModel):
    """Modelo para requisi√ß√£o de an√°lise de SMS"""
    mensagem: str
    modelo: Optional[str] = "random_forest"  # random_forest ou naive_bayes


class CaracteristicaDetectada(BaseModel):
    """Modelo para uma caracter√≠stica detectada na mensagem"""
    nome: str
    descricao: str
    icone: str
    confianca: float


class AnaliseResponse(BaseModel):
    """Modelo para resposta de an√°lise"""
    veredito: str  # "Leg√≠tima" ou "Smishing"
    confianca: float
    caracteristicas: list[CaracteristicaDetectada]
    explicacao: str
    modelo_usado: str


class FeedbackRequest(BaseModel):
    """Modelo para requisi√ß√£o de feedback"""
    mensagem: str
    veredito_original: str
    feedback_util: bool
    feedback_usuario: Optional[str] = None


class FeedbackResponse(BaseModel):
    """Modelo para resposta de feedback"""
    sucesso: bool
    mensagem: str


# ============================================================================
# FUN√á√ïES AUXILIARES
# ============================================================================

def extrair_caracteristicas_smishing(mensagem: str) -> list[CaracteristicaDetectada]:
    """
    Extrai caracter√≠sticas que indicam poss√≠vel smishing.
    
    Esta fun√ß√£o analisa a mensagem e identifica padr√µes comuns em tentativas
    de phishing por SMS.
    
    Args:
        mensagem: Texto da mensagem SMS
        
    Returns:
        Lista de caracter√≠sticas detectadas
    """
    caracteristicas = []
    mensagem_lower = mensagem.lower()
    
    # Padr√£o 1: Senso de urg√™ncia
    palavras_urgencia = ["urgente", "r√°pido", "agora", "imediato", "a√ß√£o r√°pida", 
                         "n√£o demore", "apresse", "pressa", "agir j√°"]
    if any(palavra in mensagem_lower for palavra in palavras_urgencia):
        caracteristicas.append(CaracteristicaDetectada(
            nome="Senso de Urg√™ncia",
            descricao="A mensagem pressiona voc√™ a agir r√°pido sem pensar.",
            icone="üö®",
            confianca=0.85
        ))
    
    # Padr√£o 2: Pedido de dados pessoais
    palavras_dados = ["senha", "pin", "c√≥digo", "cpf", "dados banc√°rios", 
                      "cart√£o", "n√∫mero da conta", "confirmar dados", "verificar conta"]
    if any(palavra in mensagem_lower for palavra in palavras_dados):
        caracteristicas.append(CaracteristicaDetectada(
            nome="Pedido de Dados Pessoais",
            descricao="Solicita informa√ß√µes sens√≠veis que voc√™ nunca deve compartilhar.",
            icone="üîê",
            confianca=0.95
        ))
    
    # Padr√£o 3: Pedido de dinheiro ou transfer√™ncia
    palavras_dinheiro = ["transferir", "pagar", "enviar dinheiro", "dep√≥sito", 
                         "valor", "reais", "mt", "mzn", "d√©bito"]
    if any(palavra in mensagem_lower for palavra in palavras_dinheiro):
        caracteristicas.append(CaracteristicaDetectada(
            nome="Pedido de Dinheiro",
            descricao="Solicita transfer√™ncias ou pagamentos.",
            icone="üí∞",
            confianca=0.80
        ))
    
    # Padr√£o 4: Links ou n√∫meros suspeitos
    if "http" in mensagem_lower or "www" in mensagem_lower or "bit.ly" in mensagem_lower:
        caracteristicas.append(CaracteristicaDetectada(
            nome="Presen√ßa de Links",
            descricao="Cont√©m links que podem levar a sites maliciosos.",
            icone="üîó",
            confianca=0.75
        ))
    
    # Padr√£o 5: Erros gramaticais e ortogr√°ficos
    erros = mensagem.count(" ") - len(mensagem.split())  # Heur√≠stica simples
    if len(mensagem) > 50 and (mensagem.count("  ") > 0 or 
                                mensagem.count(",,") > 0 or
                                mensagem.count("..") > 0):
        caracteristicas.append(CaracteristicaDetectada(
            nome="Erros Gramaticais",
            descricao="Mensagem cont√©m erros de digita√ß√£o ou formata√ß√£o.",
            icone="‚úèÔ∏è",
            confianca=0.60
        ))
    
    # Padr√£o 6: N√∫meros de telefone ou contas
    import re
    if re.search(r'\d{8,}', mensagem):  # Sequ√™ncia de 8+ d√≠gitos
        caracteristicas.append(CaracteristicaDetectada(
            nome="N√∫meros Suspeitos",
            descricao="Cont√©m sequ√™ncias de n√∫meros que podem ser contas ou telefones.",
            icone="üì±",
            confianca=0.70
        ))
    
    return caracteristicas


def analisar_com_modelo(mensagem: str, modelo_nome: str = "random_forest") -> tuple[str, float]:
    """
    Realiza a an√°lise da mensagem usando o modelo de ML.
    
    Args:
        mensagem: Texto da mensagem SMS
        modelo_nome: Nome do modelo a usar ("random_forest" ou "naive_bayes")
        
    Returns:
        Tupla (veredito, confian√ßa)
    """
    if tfidf_vectorizer is None:
        raise HTTPException(
            status_code=500,
            detail="Vetorizador TF-IDF n√£o carregado"
        )
    
    # Vetorizar a mensagem
    X = tfidf_vectorizer.transform([mensagem])
    
    # Escolher modelo
    if modelo_nome == "naive_bayes" and model_nb is not None:
        modelo = model_nb
    elif model_rf is not None:
        modelo = model_rf
    else:
        raise HTTPException(
            status_code=500,
            detail="Nenhum modelo dispon√≠vel para an√°lise"
        )
    
    # Fazer predi√ß√£o
    predicao = modelo.predict(X)[0]
    probabilidades = modelo.predict_proba(X)[0]
    
    # Mapear predi√ß√£o para veredito
    # CORRE√á√ÉO APLICADA AQUI: 
    # 1 √© Smishing, 0 √© Leg√≠tima (conforme o treinamento do modelo)
    veredito = "Smishing" if predicao == 1 else "Leg√≠tima"
    confianca = max(probabilidades)
    
    return veredito, confianca


# ============================================================================
# ENDPOINTS DA API
# ============================================================================

@app.get("/")
async def root():
    """Endpoint raiz para verificar se a API est√° funcionando"""
    return {
        "nome": "Detector de Smishing",
        "versao": "1.0.0",
        "status": "ativo",
        "modelos_carregados": {
            "random_forest": model_rf is not None,
            "naive_bayes": model_nb is not None,
            "tfidf_vectorizer": tfidf_vectorizer is not None
        }
    }


@app.get("/health")
async def health_check():
    """Endpoint para verifica√ß√£o de sa√∫de da API"""
    return {
        "status": "ok",
        "timestamp": datetime.now().isoformat()
    }


@app.post("/analisar", response_model=AnaliseResponse)
async def analisar_mensagem(request: AnaliseRequest):
    """
    Analisa uma mensagem SMS para detectar smishing.
    
    Args:
        request: Objeto contendo a mensagem e modelo a usar
        
    Returns:
        Resposta com veredito, confian√ßa e caracter√≠sticas detectadas
    """
    # Validar entrada
    if not request.mensagem or len(request.mensagem.strip()) == 0:
        raise HTTPException(
            status_code=400,
            detail="Mensagem n√£o pode estar vazia"
        )
    
    if len(request.mensagem) > 500:
        raise HTTPException(
            status_code=400,
            detail="Mensagem muito longa (m√°ximo 500 caracteres)"
        )
    
    try:
        # Analisar com modelo
        veredito, confianca = analisar_com_modelo(request.mensagem, request.modelo)
        
        # Extrair caracter√≠sticas heur√≠sticas
        caracteristicas = extrair_caracteristicas_smishing(request.mensagem)
        
        # Gerar explica√ß√£o
        if veredito == "Smishing":
            explicacao = "Esta mensagem foi classificada como **Smishing**. Recomendamos extrema cautela. N√£o clique em links, n√£o forne√ßa dados pessoais e entre em contato diretamente com a suposta institui√ß√£o por canais oficiais."
        else:
            explicacao = "Esta mensagem foi classificada como leg√≠tima. No entanto, sempre mantenha a cautela com mensagens n√£o esperadas. Se tiver d√∫vidas, entre em contato diretamente com a institui√ß√£o."
        
        # Se for leg√≠tima, mas tiver caracter√≠sticas suspeitas, adicionar um alerta
        if veredito == "Leg√≠tima" and len(caracteristicas) > 0:
            explicacao += " **ATEN√á√ÉO:** Embora o modelo a considere leg√≠tima, foram detectadas caracter√≠sticas comuns em golpes. Prossiga com cautela."
        
        # Se for Smishing, mas a confian√ßa for baixa, adicionar um alerta
        if veredito == "Smishing" and confianca < 0.7:
            explicacao += " **NOTA:** A confian√ßa do modelo nesta classifica√ß√£o √© baixa. Considere a an√°lise das caracter√≠sticas detectadas."
            
        # Retornar resposta
        return AnaliseResponse(
            veredito=veredito,
            confianca=round(confianca * 100, 2),
            caracteristicas=caracteristicas,
            explicacao=explicacao,
            modelo_usado=request.modelo
        )
        
    except HTTPException as e:
        raise e
    except Exception as e:
        print(f"Erro inesperado na an√°lise: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Erro interno do servidor: {e}"
        )


@app.post("/feedback", response_model=FeedbackResponse)
async def registrar_feedback(request: FeedbackRequest):
    """
    Registra o feedback do usu√°rio sobre a an√°lise.
    
    Args:
        request: Objeto contendo a mensagem, veredito original e feedback
        
    Returns:
        Resposta de sucesso
    """
    try:
        # Caminho para o arquivo de log de feedback
        feedback_file = DATA_DIR / "feedback_log.csv"
        
        # Preparar dados para o log
        log_data = {
            "timestamp": datetime.now().isoformat(),
            "mensagem": request.mensagem,
            "veredito_original": request.veredito_original,
            "feedback_util": request.feedback_util,
            "feedback_usuario": request.feedback_usuario if request.feedback_usuario else ""
        }
        
        # Verificar se o arquivo existe para escrever o cabe√ßalho
        file_exists = os.path.exists(feedback_file)
        
        with open(feedback_file, 'a', newline='', encoding='utf-8') as csvfile:
            fieldnames = log_data.keys()
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            
            if not file_exists:
                writer.writeheader()  # Escreve o cabe√ßalho apenas se o arquivo for novo
            
            writer.writerow(log_data)
            
        return FeedbackResponse(
            sucesso=True,
            mensagem="Feedback registrado com sucesso!"
        )
        
    except Exception as e:
        print(f"Erro ao registrar feedback: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Erro interno ao registrar feedback: {e}"
        )

# ============================================================================
# EXECU√á√ÉO LOCAL (opcional)
# ============================================================================

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)